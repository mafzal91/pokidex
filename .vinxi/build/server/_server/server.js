import{isRedirect as R,isNotFound as x}from"@tanstack/router-core";import M from"tiny-invariant";import{eventHandler as N,toWebRequest as j,getResponseStatus as L,getEvent as b}from"@tanstack/start-server-core";import{startSerializer as u}from"@tanstack/start-client-core";const I={"src_routes_index_tsx--getPokemonList_createServerFn_handler":{functionName:"getPokemonList_createServerFn_handler",importer:()=>import("./assets/index-xB2Xpc09.js")}},z=N(O),d=I;async function O(n){const t=j(n);return await P({request:t,event:n})}function D(n){return n.replace(/^\/|\/$/g,"")}async function P({request:n,event:t}){const s=new AbortController,i=s.signal,v=()=>s.abort();t.node.req.on("close",v);const h=n.method,g=new URL(n.url,"http://localhost:3000"),_=new RegExp(`${D("/_server")}/([^/?#]+)`),y=g.pathname.match(_),o=y?y[1]:null,c=Object.fromEntries(g.searchParams.entries()),m="createServerFn"in c,E="raw"in c;if(typeof o!="string")throw new Error("Invalid server action param for serverFnId: "+o);const w=d[o];if(!w)throw console.log("serverFnManifest",d),new Error("Server function info not found for "+o);let l;if(l=await w.importer(),!l)throw console.log("serverFnManifest",d),new Error("Server function module not resolved for "+o);const a=l[w.functionName];if(!a)throw console.log("serverFnManifest",d),console.log("fnModule",l),new Error(`Server function module export not resolved for serverFn ID: ${o}`);const T=["multipart/form-data","application/x-www-form-urlencoded"],f=await(async()=>{try{let e=await(async()=>{if(n.headers.get("Content-Type")&&T.some(r=>{var S;return(S=n.headers.get("Content-Type"))==null?void 0:S.includes(r)}))return M(h.toLowerCase()!=="get","GET requests with FormData payloads are not supported"),await a(await n.formData(),i);if(h.toLowerCase()==="get"){let r=c;return m&&(r=c.payload),r=r&&u.parse(r),await a(r,i)}const p=await n.text(),F=u.parse(p);return m?await a(F,i):await a(...F,i)})();return e.result instanceof Response?e.result:!m&&(e=e.result,e instanceof Response)?e:R(e)||x(e)?C(e):new Response(e!==void 0?u.stringify(e):void 0,{status:L(b()),headers:{"Content-Type":"application/json"}})}catch(e){return e instanceof Response?e:R(e)||x(e)?C(e):(console.info(),console.info("Server Fn Error!"),console.info(),console.error(e),console.info(),new Response(u.stringify(e),{status:500,headers:{"Content-Type":"application/json"}}))}})();if(t.node.req.removeListener("close",v),E)return f;if(f.headers.get("Content-Type")==="application/json"){const p=await f.clone().text();p&&JSON.stringify(JSON.parse(p))}return f}function C(n){const{headers:t,...s}=n;return new Response(JSON.stringify(s),{status:200,headers:{"Content-Type":"application/json",...t||{}}})}export{z as default};
