// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zVersionGroupSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zLanguageSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zAbilityChangeEffectText = z.object({
    effect: z.string().max(6000),
    language: zLanguageSummary
});

export const zAbilityChange = z.object({
    version_group: zVersionGroupSummary,
    effect_entries: z.array(zAbilityChangeEffectText).readonly()
});

export const zGenerationSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zAbilityName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zAbilityEffectText = z.object({
    effect: z.string().max(6000),
    short_effect: z.string().max(300),
    language: zLanguageSummary
});

export const zAbilityFlavorText = z.object({
    flavor_text: z.string(),
    language: zLanguageSummary,
    version_group: zVersionGroupSummary
});

export const zAbilityDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    is_main_series: z.boolean().optional(),
    generation: zGenerationSummary,
    names: z.array(zAbilityName).readonly(),
    effect_entries: z.array(zAbilityEffectText).readonly(),
    effect_changes: z.array(zAbilityChange).readonly(),
    flavor_text_entries: z.array(zAbilityFlavorText).readonly(),
    pokemon: z.array(z.object({
        is_hidden: z.boolean(),
        slot: z.number().int(),
        pokemon: z.object({
            name: z.string(),
            url: z.string().url()
        })
    })).readonly()
});

export const zAbilitySummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zBerryFirmnessSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zItemSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zTypeSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zBerryDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    growth_time: z.number().int(),
    max_harvest: z.number().int(),
    natural_gift_power: z.number().int(),
    size: z.number().int(),
    smoothness: z.number().int(),
    soil_dryness: z.number().int(),
    firmness: zBerryFirmnessSummary,
    flavors: z.array(z.object({
        potency: z.number().int(),
        flavor: z.object({
            name: z.string().optional(),
            url: z.string().url().optional()
        })
    })).readonly(),
    item: zItemSummary,
    natural_gift_type: zTypeSummary
});

export const zBerrySummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zBerryFirmnessName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zBerryFirmnessDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    berries: z.array(zBerrySummary).readonly(),
    names: z.array(zBerryFirmnessName).readonly()
});

export const zContestTypeSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zBerryFlavorName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zBerryFlavorDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    berries: z.array(z.object({
        potency: z.number().int(),
        berry: z.object({
            name: z.string().optional(),
            url: z.string().url().optional()
        })
    })).readonly(),
    contest_type: zContestTypeSummary,
    names: z.array(zBerryFlavorName).readonly()
});

export const zBerryFlavorSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zCharacteristicDescription = z.object({
    description: z.string().max(1000).optional(),
    language: zLanguageSummary
});

export const zStatSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zCharacteristicDetail = z.object({
    id: z.number().int().readonly(),
    gene_modulo: z.number().int(),
    possible_values: z.array(z.number().int()).readonly(),
    highest_stat: zStatSummary,
    descriptions: z.array(zCharacteristicDescription).readonly()
});

export const zCharacteristicSummary = z.object({
    url: z.string().url().readonly()
});

export const zContestEffectEffectText = z.object({
    effect: z.string().max(6000),
    language: zLanguageSummary
});

export const zContestEffectFlavorText = z.object({
    flavor_text: z.string().max(500),
    language: zLanguageSummary
});

export const zContestEffectDetail = z.object({
    id: z.number().int().readonly(),
    appeal: z.number().int(),
    jam: z.number().int(),
    effect_entries: z.array(zContestEffectEffectText).readonly(),
    flavor_text_entries: z.array(zContestEffectFlavorText).readonly()
});

export const zContestEffectSummary = z.object({
    url: z.string().url().readonly()
});

export const zContestTypeName = z.object({
    name: z.string().max(200),
    color: z.string().max(10),
    language: zLanguageSummary
});

export const zContestTypeDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    berry_flavor: zBerryFlavorSummary,
    names: z.array(zContestTypeName).readonly()
});

export const zEggGroupName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zEggGroupDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    names: z.array(zEggGroupName).readonly(),
    pokemon_species: z.array(z.object({
        name: z.string().optional(),
        url: z.string().url().optional()
    })).readonly()
});

export const zEggGroupSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zEncounterConditionValueSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zEncounterConditionName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zEncounterConditionDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    values: z.array(zEncounterConditionValueSummary).readonly(),
    names: z.array(zEncounterConditionName).readonly()
});

export const zEncounterConditionSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zEncounterConditionValueName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zEncounterConditionValueDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    condition: zEncounterConditionSummary,
    names: z.array(zEncounterConditionValueName).readonly()
});

export const zEncounterMethodName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zEncounterMethodDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    order: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    names: z.array(zEncounterMethodName).readonly()
});

export const zEncounterMethodSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zEvolutionChainDetail = z.object({
    id: z.number().int().readonly(),
    baby_trigger_item: zItemSummary,
    chain: z.object({
        evolution_details: z.array(z.unknown()),
        evolves_to: z.array(z.object({
            evolution_details: z.array(z.object({
                gender: z.object({
                    name: z.string(),
                    url: z.string().url()
                }),
                held_item: z.object({
                    name: z.string(),
                    url: z.string().url()
                }),
                item: z.object({
                    name: z.string(),
                    url: z.string().url()
                }),
                known_move: z.unknown(),
                known_move_type: z.unknown(),
                location: z.object({
                    name: z.string(),
                    url: z.string().url()
                }),
                min_affection: z.number().int(),
                min_beauty: z.number().int(),
                min_happiness: z.number().int(),
                min_level: z.number().int(),
                needs_overworld_rain: z.boolean(),
                party_species: z.string(),
                party_type: z.string(),
                relative_physical_stats: z.string(),
                time_of_day: z.string(),
                trade_species: z.string(),
                trigger: z.object({
                    name: z.string(),
                    url: z.string().url()
                }),
                turn_upside_down: z.boolean()
            })),
            is_baby: z.boolean(),
            species: z.object({
                name: z.string(),
                url: z.string().url()
            })
        })),
        is_baby: z.boolean(),
        species: z.object({
            name: z.string(),
            url: z.string().url()
        })
    }).readonly()
});

export const zEvolutionChainSummary = z.object({
    url: z.string().url().readonly()
});

export const zEvolutionTriggerName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zEvolutionTriggerDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    names: z.array(zEvolutionTriggerName).readonly(),
    pokemon_species: z.array(z.object({
        name: z.string(),
        url: z.string().url()
    })).readonly()
});

export const zEvolutionTriggerSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zExperience = z.object({
    level: z.number().int(),
    experience: z.number().int()
});

export const zGenderDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    pokemon_species_details: z.array(z.object({
        rate: z.number().int(),
        pokemon_species: z.object({
            name: z.string(),
            url: z.string().url()
        })
    })).readonly(),
    required_for_evolution: z.array(z.object({
        name: z.string(),
        url: z.string().url()
    })).readonly()
});

export const zGenderSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zRegionSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zMoveSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zGenerationName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zPokemonSpeciesSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zGenerationDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    abilities: z.array(zAbilitySummary).readonly(),
    main_region: zRegionSummary,
    moves: z.array(zMoveSummary).readonly(),
    names: z.array(zGenerationName).readonly(),
    pokemon_species: z.array(zPokemonSpeciesSummary).readonly(),
    types: z.array(zTypeSummary).readonly(),
    version_groups: z.array(zVersionGroupSummary).readonly()
});

export const zGrowthRateDescription = z.object({
    description: z.string().max(1000).optional(),
    language: zLanguageSummary
});

export const zGrowthRateDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    formula: z.string().max(500),
    descriptions: z.array(zGrowthRateDescription).readonly(),
    levels: z.array(zExperience).readonly(),
    pokemon_species: z.array(zPokemonSpeciesSummary).readonly()
});

export const zGrowthRateSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zItemAttributeDescription = z.object({
    description: z.string().max(1000).optional(),
    language: zLanguageSummary
});

export const zItemAttributeName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zItemAttributeDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    descriptions: z.array(zItemAttributeDescription).readonly(),
    items: z.array(z.object({
        name: z.string(),
        url: z.string().url()
    })).readonly(),
    names: z.array(zItemAttributeName).readonly()
});

export const zItemAttributeSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zItemCategoryName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zItemPocketSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zItemCategoryDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    items: z.array(zItemSummary).readonly(),
    names: z.array(zItemCategoryName).readonly(),
    pocket: zItemPocketSummary
});

export const zItemCategorySummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zItemFlingEffectSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zItemEffectText = z.object({
    effect: z.string().max(6000),
    short_effect: z.string().max(300),
    language: zLanguageSummary
});

export const zItemFlavorText = z.object({
    text: z.string(),
    version_group: zVersionGroupSummary,
    language: zLanguageSummary
});

export const zItemGameIndex = z.object({
    game_index: z.number().int(),
    generation: zGenerationSummary
});

export const zItemName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zItemDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    cost: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    fling_power: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    fling_effect: zItemFlingEffectSummary,
    attributes: z.array(z.object({
        name: z.string(),
        url: z.string().url()
    })).readonly(),
    category: zItemCategorySummary,
    effect_entries: z.array(zItemEffectText).readonly(),
    flavor_text_entries: z.array(zItemFlavorText).readonly(),
    game_indices: z.array(zItemGameIndex).readonly(),
    names: z.array(zItemName).readonly(),
    held_by_pokemon: z.array(z.object({
        pokemon: z.object({
            name: z.string(),
            url: z.string().url()
        }),
        'version-details': z.array(z.object({
            rarity: z.number().int(),
            version: z.object({
                name: z.string(),
                url: z.string().url()
            })
        }))
    })).readonly(),
    sprites: z.object({
        default: z.string().url()
    }).readonly(),
    baby_trigger_for: z.object({
        url: z.string().url()
    }).readonly(),
    machines: z.array(z.object({
        machine: z.string().url(),
        version_group: z.object({
            name: z.string(),
            url: z.string().url()
        })
    })).readonly()
});

export const zItemFlingEffectEffectText = z.object({
    effect: z.string().max(6000),
    language: zLanguageSummary
});

export const zItemFlingEffectDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    effect_entries: z.array(zItemFlingEffectEffectText).readonly(),
    items: z.array(zItemSummary).readonly()
});

export const zItemPocketName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zItemPocketDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    categories: z.array(zItemCategorySummary).readonly(),
    names: z.array(zItemPocketName).readonly()
});

export const zLanguageName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zLanguageDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    official: z.boolean().optional(),
    iso639: z.string().max(10),
    iso3166: z.string().max(2),
    names: z.array(zLanguageName).readonly()
});

export const zLocationSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zLocationAreaName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zLocationAreaDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    game_index: z.number().int(),
    encounter_method_rates: z.array(z.object({
        encounter_method: z.object({
            name: z.string(),
            url: z.string().url()
        }),
        version_details: z.array(z.object({
            rate: z.number().int(),
            version: z.object({
                name: z.string(),
                url: z.string().url()
            })
        }))
    })).readonly(),
    location: zLocationSummary,
    names: z.array(zLocationAreaName).readonly(),
    pokemon_encounters: z.array(z.object({
        pokemon: z.object({
            name: z.string(),
            url: z.string().url()
        }),
        version_details: z.array(z.object({
            version: z.object({
                name: z.string(),
                url: z.string().url()
            }),
            max_chance: z.number().int(),
            encounter_details: z.object({
                min_level: z.number().int(),
                max_level: z.number().int(),
                condition_values: z.object({
                    name: z.string(),
                    url: z.string().url()
                }).optional(),
                chance: z.number().int(),
                method: z.object({
                    name: z.string(),
                    url: z.string().url()
                })
            })
        }))
    })).readonly()
});

export const zLocationAreaSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zLocationName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zLocationGameIndex = z.object({
    game_index: z.number().int(),
    generation: zGenerationSummary
});

export const zLocationDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    region: zRegionSummary,
    names: z.array(zLocationName).readonly(),
    game_indices: z.array(zLocationGameIndex).readonly(),
    areas: z.array(zLocationAreaSummary).readonly()
});

export const zMachineDetail = z.object({
    id: z.number().int().readonly(),
    item: zItemSummary,
    version_group: zVersionGroupSummary,
    move: zMoveSummary
});

export const zMachineSummary = z.object({
    url: z.string().url().readonly()
});

export const zMoveBattleStyleName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zMoveBattleStyleDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    names: z.array(zMoveBattleStyleName).readonly()
});

export const zMoveBattleStyleSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zMoveChange = z.object({
    accuracy: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    power: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    pp: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    effect_chance: z.number().int(),
    effect_entries: z.array(z.object({
        effect: z.string(),
        short_effect: z.string(),
        language: z.object({
            name: z.string(),
            url: z.string().url()
        })
    })).readonly(),
    type: zTypeSummary,
    version_group: zVersionGroupSummary
});

export const zMoveDamageClassDescription = z.object({
    description: z.string().max(1000).optional(),
    language: zLanguageSummary
});

export const zMoveDamageClassName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zMoveDamageClassDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    descriptions: z.array(zMoveDamageClassDescription).readonly(),
    moves: z.array(zMoveSummary).readonly(),
    names: z.array(zMoveDamageClassName).readonly()
});

export const zMoveDamageClassSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zMoveMetaAilmentSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zMoveMetaCategorySummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zMoveMeta = z.object({
    ailment: zMoveMetaAilmentSummary,
    category: zMoveMetaCategorySummary,
    min_hits: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    max_hits: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    min_turns: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    max_turns: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    drain: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    healing: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    crit_rate: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    ailment_chance: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    flinch_chance: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    stat_chance: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zMoveName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zSuperContestEffectSummary = z.object({
    url: z.string().url().readonly()
});

export const zMoveTargetSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zMoveFlavorText = z.object({
    flavor_text: z.string(),
    language: zLanguageSummary,
    version_group: zVersionGroupSummary
});

export const zMoveDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    accuracy: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    effect_chance: z.number().int(),
    pp: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    priority: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    power: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    contest_combos: z.object({
        normal: z.object({
            use_before: z.array(z.object({
                name: z.string(),
                url: z.string().url()
            })),
            use_after: z.array(z.object({
                name: z.string(),
                url: z.string().url()
            }))
        }),
        super: z.object({
            use_before: z.array(z.object({
                name: z.string(),
                url: z.string().url()
            })),
            use_after: z.array(z.object({
                name: z.string(),
                url: z.string().url()
            }))
        })
    }).readonly(),
    contest_type: zContestTypeSummary,
    contest_effect: zContestEffectSummary,
    damage_class: zMoveDamageClassSummary,
    effect_entries: z.array(z.object({
        effect: z.string(),
        short_effect: z.string(),
        language: z.object({
            name: z.string(),
            url: z.string().url()
        })
    })).readonly(),
    effect_changes: z.array(z.object({
        effect_entries: z.array(z.object({
            effect: z.string(),
            language: z.object({
                name: z.string(),
                url: z.string().url()
            })
        })),
        version_group: z.object({
            name: z.string(),
            url: z.string().url()
        })
    })).readonly(),
    generation: zGenerationSummary,
    meta: zMoveMeta,
    names: z.array(zMoveName).readonly(),
    past_values: z.array(zMoveChange).readonly(),
    stat_changes: z.array(z.object({
        change: z.number().int(),
        stat: z.object({
            name: z.string(),
            url: z.string().url()
        })
    })).readonly(),
    super_contest_effect: zSuperContestEffectSummary,
    target: zMoveTargetSummary,
    type: zTypeSummary,
    machines: z.array(z.object({
        machine: z.object({
            url: z.string().url()
        }),
        version_group: z.object({
            name: z.string(),
            url: z.string().url()
        })
    })).readonly(),
    flavor_text_entries: z.array(zMoveFlavorText).readonly(),
    learned_by_pokemon: z.array(z.object({
        name: z.string(),
        url: z.string().url()
    })).readonly()
});

export const zMoveLearnMethodDescription = z.object({
    description: z.string().max(1000).optional(),
    language: zLanguageSummary
});

export const zMoveLearnMethodName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zMoveLearnMethodDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    names: z.array(zMoveLearnMethodName).readonly(),
    descriptions: z.array(zMoveLearnMethodDescription).readonly(),
    version_groups: z.array(z.object({
        name: z.string(),
        url: z.string().url()
    })).readonly()
});

export const zMoveLearnMethodSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zMoveMetaAilmentName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zMoveMetaAilmentDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    moves: z.array(z.object({
        name: z.string(),
        url: z.string().url()
    })).readonly(),
    names: z.array(zMoveMetaAilmentName).readonly()
});

export const zMoveMetaCategoryDescription = z.object({
    description: z.string().max(1000).optional(),
    language: zLanguageSummary
});

export const zMoveMetaCategoryDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    descriptions: z.array(zMoveMetaCategoryDescription).readonly(),
    moves: z.array(z.object({
        name: z.string(),
        url: z.string().url()
    })).readonly()
});

export const zMoveTargetDescription = z.object({
    description: z.string().max(1000).optional(),
    language: zLanguageSummary
});

export const zMoveTargetName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zMoveTargetDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    descriptions: z.array(zMoveTargetDescription).readonly(),
    moves: z.array(zMoveSummary).readonly(),
    names: z.array(zMoveTargetName).readonly()
});

export const zNatureBattleStylePreference = z.object({
    low_hp_preference: z.number().int(),
    high_hp_preference: z.number().int(),
    move_battle_style: zMoveBattleStyleSummary
});

export const zNatureName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zNatureDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    decreased_stat: zStatSummary,
    increased_stat: zStatSummary,
    likes_flavor: zBerryFlavorSummary,
    hates_flavor: zBerryFlavorSummary,
    berries: z.array(zBerrySummary).readonly(),
    pokeathlon_stat_changes: z.array(z.object({
        max_change: z.number().int(),
        pokeathlon_stat: z.object({
            name: z.string(),
            url: z.string().url()
        })
    })).readonly(),
    move_battle_style_preferences: z.array(zNatureBattleStylePreference).readonly(),
    names: z.array(zNatureName).readonly()
});

export const zNatureSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zPaginatedAbilitySummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zAbilitySummary).optional()
});

export const zPaginatedBerryFirmnessSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zBerryFirmnessSummary).optional()
});

export const zPaginatedBerryFlavorSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zBerryFlavorSummary).optional()
});

export const zPaginatedBerrySummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zBerrySummary).optional()
});

export const zPaginatedCharacteristicSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zCharacteristicSummary).optional()
});

export const zPaginatedContestEffectSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zContestEffectSummary).optional()
});

export const zPaginatedContestTypeSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zContestTypeSummary).optional()
});

export const zPaginatedEggGroupSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zEggGroupSummary).optional()
});

export const zPaginatedEncounterConditionSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zEncounterConditionSummary).optional()
});

export const zPaginatedEncounterConditionValueSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zEncounterConditionValueSummary).optional()
});

export const zPaginatedEncounterMethodSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zEncounterMethodSummary).optional()
});

export const zPaginatedEvolutionChainSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zEvolutionChainSummary).optional()
});

export const zPaginatedEvolutionTriggerSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zEvolutionTriggerSummary).optional()
});

export const zPaginatedGenderSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zGenderSummary).optional()
});

export const zPaginatedGenerationSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zGenerationSummary).optional()
});

export const zPaginatedGrowthRateSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zGrowthRateSummary).optional()
});

export const zPaginatedItemAttributeSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zItemAttributeSummary).optional()
});

export const zPaginatedItemCategorySummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zItemCategorySummary).optional()
});

export const zPaginatedItemFlingEffectSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zItemFlingEffectSummary).optional()
});

export const zPaginatedItemPocketSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zItemPocketSummary).optional()
});

export const zPaginatedItemSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zItemSummary).optional()
});

export const zPaginatedLanguageSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zLanguageSummary).optional()
});

export const zPaginatedLocationAreaSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zLocationAreaSummary).optional()
});

export const zPaginatedLocationSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zLocationSummary).optional()
});

export const zPaginatedMachineSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zMachineSummary).optional()
});

export const zPaginatedMoveBattleStyleSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zMoveBattleStyleSummary).optional()
});

export const zPaginatedMoveDamageClassSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zMoveDamageClassSummary).optional()
});

export const zPaginatedMoveLearnMethodSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zMoveLearnMethodSummary).optional()
});

export const zPaginatedMoveMetaAilmentSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zMoveMetaAilmentSummary).optional()
});

export const zPaginatedMoveMetaCategorySummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zMoveMetaCategorySummary).optional()
});

export const zPaginatedMoveSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zMoveSummary).optional()
});

export const zPaginatedMoveTargetSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zMoveTargetSummary).optional()
});

export const zPaginatedNatureSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zNatureSummary).optional()
});

export const zPalParkAreaSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zPaginatedPalParkAreaSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zPalParkAreaSummary).optional()
});

export const zPokeathlonStatSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zPaginatedPokeathlonStatSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zPokeathlonStatSummary).optional()
});

export const zPokedexSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zPaginatedPokedexSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zPokedexSummary).optional()
});

export const zPokemonColorSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zPaginatedPokemonColorSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zPokemonColorSummary).optional()
});

export const zPokemonFormSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zPaginatedPokemonFormSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zPokemonFormSummary).optional()
});

export const zPokemonHabitatSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zPaginatedPokemonHabitatSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zPokemonHabitatSummary).optional()
});

export const zPokemonShapeSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zPaginatedPokemonShapeSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zPokemonShapeSummary).optional()
});

export const zPaginatedPokemonSpeciesSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zPokemonSpeciesSummary).optional()
});

export const zPokemonSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zPaginatedPokemonSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zPokemonSummary).optional()
});

export const zPaginatedRegionSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zRegionSummary).optional()
});

export const zPaginatedStatSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zStatSummary).optional()
});

export const zPaginatedSuperContestEffectSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zSuperContestEffectSummary).optional()
});

export const zPaginatedTypeSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zTypeSummary).optional()
});

export const zPaginatedVersionGroupSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zVersionGroupSummary).optional()
});

export const zVersionSummary = z.object({
    name: z.string().max(200),
    url: z.string().url().readonly()
});

export const zPaginatedVersionSummaryList = z.object({
    count: z.number().int().optional(),
    next: z.string().url().optional(),
    previous: z.string().url().optional(),
    results: z.array(zVersionSummary).optional()
});

export const zPalParkAreaName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zPalParkAreaDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    names: z.array(zPalParkAreaName).readonly(),
    pokemon_encounters: z.array(z.object({
        base_score: z.number().int(),
        'pokemon-species': z.object({
            name: z.string(),
            url: z.string().url()
        }),
        rate: z.number().int()
    })).readonly()
});

export const zPokeathlonStatName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zPokeathlonStatDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    affecting_natures: z.object({
        decrease: z.array(z.object({
            max_change: z.number().int().lte(-1),
            nature: z.object({
                name: z.string(),
                url: z.string().url()
            })
        })),
        increase: z.array(z.object({
            max_change: z.number().int().gte(1),
            nature: z.object({
                name: z.string(),
                url: z.string().url()
            })
        }))
    }).readonly(),
    names: z.array(zPokeathlonStatName).readonly()
});

export const zPokedexDescription = z.object({
    description: z.string().max(1000).optional(),
    language: zLanguageSummary
});

export const zPokedexName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zPokedexDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    is_main_series: z.boolean().optional(),
    descriptions: z.array(zPokedexDescription).readonly(),
    names: z.array(zPokedexName).readonly(),
    pokemon_entries: z.array(z.object({
        entry_number: z.number().int(),
        pokemon_species: z.object({
            name: z.string(),
            url: z.string().url()
        })
    })).readonly(),
    region: zRegionSummary,
    version_groups: z.array(z.object({
        name: z.string(),
        url: z.string().url()
    })).readonly()
});

export const zPokemonColorName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zPokemonColorDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    names: z.array(zPokemonColorName).readonly(),
    pokemon_species: z.array(zPokemonSpeciesSummary).readonly()
});

export const zPokemonGameIndex = z.object({
    game_index: z.number().int(),
    version: zVersionSummary
});

export const zPokemonStat = z.object({
    base_stat: z.number().int(),
    effort: z.number().int(),
    stat: zStatSummary
});

export const zPokemonDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    base_experience: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    height: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    is_default: z.boolean().optional(),
    order: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    weight: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    abilities: z.array(z.object({
        ability: z.object({
            name: z.string(),
            url: z.string().url()
        }),
        is_hidden: z.boolean(),
        slot: z.number().int()
    })).readonly(),
    past_abilities: z.array(z.object({
        abilities: z.array(z.object({
            ability: z.object({
                name: z.string(),
                url: z.string().url()
            }),
            is_hidden: z.boolean(),
            slot: z.number().int()
        })),
        generation: z.object({
            name: z.string(),
            url: z.string().url()
        })
    })).readonly(),
    forms: z.array(zPokemonFormSummary).readonly(),
    game_indices: z.array(zPokemonGameIndex).readonly(),
    held_items: z.object({
        item: z.object({
            name: z.string(),
            url: z.string().url()
        }),
        version_details: z.array(z.object({
            rarity: z.number().int(),
            version: z.object({
                name: z.string(),
                url: z.string().url()
            })
        }))
    }).readonly(),
    location_area_encounters: z.string().readonly(),
    moves: z.array(z.object({
        move: z.object({
            name: z.string(),
            url: z.string().url()
        }),
        version_group_details: z.array(z.object({
            level_learned_at: z.number().int(),
            move_learn_method: z.object({
                name: z.string(),
                url: z.string().url()
            }),
            version_group: z.object({
                name: z.string(),
                url: z.string().url()
            })
        }))
    })).readonly(),
    species: zPokemonSpeciesSummary,
    sprites: z.object({
        front_default: z.string().url().optional()
    }).readonly(),
    cries: z.object({
        latest: z.string().url(),
        legacy: z.string().url()
    }).readonly(),
    stats: z.array(zPokemonStat).readonly(),
    types: z.array(z.object({
        slot: z.number().int(),
        type: z.object({
            name: z.string(),
            url: z.string().url()
        })
    })).readonly(),
    past_types: z.array(z.object({
        generation: z.object({
            name: z.string(),
            url: z.string().url()
        }),
        types: z.array(z.object({
            slot: z.number().int(),
            type: z.object({
                name: z.string(),
                url: z.string().url()
            })
        }))
    })).readonly()
});

export const zPokemonDexEntry = z.object({
    entry_number: z.number().int(),
    pokedex: zPokedexSummary
});

export const zPokemonFormDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    order: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    form_order: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    is_default: z.boolean().optional(),
    is_battle_only: z.boolean().optional(),
    is_mega: z.boolean().optional(),
    form_name: z.string().max(30),
    pokemon: zPokemonSummary,
    sprites: z.object({
        default: z.string().url().optional()
    }).readonly(),
    version_group: zVersionGroupSummary,
    form_names: z.array(z.object({
        language: z.object({
            name: z.string(),
            url: z.string().url()
        }),
        name: z.string()
    })).readonly(),
    names: z.array(z.object({
        language: z.object({
            name: z.string(),
            url: z.string().url()
        }),
        name: z.string()
    })).readonly(),
    types: z.array(z.object({
        slot: z.number().int(),
        type: z.object({
            name: z.string(),
            url: z.string().url()
        })
    })).readonly()
});

export const zPokemonHabitatName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zPokemonHabitatDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    names: z.array(zPokemonHabitatName).readonly(),
    pokemon_species: z.array(zPokemonSpeciesSummary).readonly()
});

export const zPokemonShapeDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    awesome_names: z.array(z.object({
        awesome_name: z.string(),
        language: z.object({
            name: z.string(),
            url: z.string().url()
        })
    })).readonly(),
    names: z.array(z.object({
        url: z.string().url(),
        name: z.string()
    })).readonly(),
    pokemon_species: z.array(zPokemonSpeciesSummary).readonly()
});

export const zPokemonSpeciesDescription = z.object({
    description: z.string().max(1000).optional(),
    language: zLanguageSummary
});

export const zPokemonSpeciesFlavorText = z.object({
    flavor_text: z.string(),
    language: zLanguageSummary,
    version: zVersionSummary
});

export const zPokemonSpeciesDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    order: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    gender_rate: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    capture_rate: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    base_happiness: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    is_baby: z.boolean().optional(),
    is_legendary: z.boolean().optional(),
    is_mythical: z.boolean().optional(),
    hatch_counter: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    has_gender_differences: z.boolean().optional(),
    forms_switchable: z.boolean().optional(),
    growth_rate: zGrowthRateSummary,
    pokedex_numbers: z.array(zPokemonDexEntry).readonly(),
    egg_groups: z.array(z.object({
        name: z.string(),
        url: z.string().url()
    })).readonly(),
    color: zPokemonColorSummary,
    shape: zPokemonShapeSummary,
    evolves_from_species: zPokemonSpeciesSummary,
    evolution_chain: zEvolutionChainSummary,
    habitat: zPokemonHabitatSummary,
    generation: zGenerationSummary,
    names: z.array(z.object({
        language: z.object({
            name: z.string(),
            url: z.string().url()
        }),
        name: z.string()
    })).readonly(),
    pal_park_encounters: z.array(z.object({
        area: z.object({
            name: z.string(),
            url: z.string().url()
        }),
        base_score: z.number().int(),
        rate: z.number().int()
    })).readonly(),
    form_descriptions: z.array(zPokemonSpeciesDescription).readonly(),
    flavor_text_entries: z.array(zPokemonSpeciesFlavorText).readonly(),
    genera: z.array(z.object({
        genus: z.string(),
        language: z.object({
            name: z.string(),
            url: z.string().url()
        })
    })).readonly(),
    varieties: z.array(z.object({
        is_default: z.boolean(),
        pokemon: z.object({
            name: z.string(),
            url: z.string().url()
        })
    })).readonly()
});

export const zRegionName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zRegionDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    locations: z.array(zLocationSummary).readonly(),
    main_generation: zGenerationSummary,
    names: z.array(zRegionName).readonly(),
    pokedexes: z.array(zPokedexSummary).readonly(),
    version_groups: z.array(z.object({
        name: z.string(),
        url: z.string().url()
    })).readonly()
});

export const zStatName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zStatDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    game_index: z.number().int(),
    is_battle_only: z.boolean().optional(),
    affecting_moves: z.object({
        increase: z.array(z.object({
            change: z.number().int(),
            move: z.object({
                name: z.string(),
                url: z.string().url()
            })
        })),
        decrease: z.array(z.object({
            change: z.number().int(),
            move: z.object({
                name: z.string(),
                url: z.string().url()
            })
        }))
    }).readonly(),
    affecting_natures: z.object({
        increase: z.array(z.object({
            name: z.string(),
            url: z.string().url()
        })),
        decrease: z.array(z.object({
            name: z.string(),
            url: z.string().url()
        }))
    }).readonly(),
    characteristics: z.array(zCharacteristicSummary).readonly(),
    move_damage_class: zMoveDamageClassSummary,
    names: z.array(zStatName).readonly()
});

export const zSuperContestEffectFlavorText = z.object({
    flavor_text: z.string().max(500),
    language: zLanguageSummary
});

export const zSuperContestEffectDetail = z.object({
    id: z.number().int().readonly(),
    appeal: z.number().int(),
    flavor_text_entries: z.array(zSuperContestEffectFlavorText).readonly(),
    moves: z.array(zMoveSummary).readonly()
});

export const zTypeGameIndex = z.object({
    game_index: z.number().int(),
    generation: zGenerationSummary
});

export const zTypeDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    damage_relations: z.object({
        no_damage_to: z.array(z.object({
            name: z.string(),
            url: z.string().url()
        })),
        half_damage_to: z.array(z.object({
            name: z.string(),
            url: z.string().url()
        })),
        double_damage_to: z.array(z.object({
            name: z.string(),
            url: z.string().url()
        })),
        no_damage_from: z.array(z.object({
            name: z.string(),
            url: z.string().url()
        })),
        half_damage_from: z.array(z.object({
            name: z.string(),
            url: z.string().url()
        })),
        double_damage_from: z.array(z.object({
            name: z.string(),
            url: z.string().url()
        }))
    }).readonly(),
    past_damage_relations: z.array(z.object({
        generation: z.object({
            name: z.string(),
            url: z.string().url()
        }),
        damage_relations: z.object({
            no_damage_to: z.array(z.object({
                name: z.string(),
                url: z.string().url()
            })),
            half_damage_to: z.array(z.object({
                name: z.string(),
                url: z.string().url()
            })),
            double_damage_to: z.array(z.object({
                name: z.string(),
                url: z.string().url()
            })),
            no_damage_from: z.array(z.object({
                name: z.string(),
                url: z.string().url()
            })),
            half_damage_from: z.array(z.object({
                name: z.string(),
                url: z.string().url()
            })),
            double_damage_from: z.array(z.object({
                name: z.string(),
                url: z.string().url()
            }))
        })
    })).readonly(),
    game_indices: z.array(zTypeGameIndex).readonly(),
    generation: zGenerationSummary,
    move_damage_class: zMoveDamageClassSummary,
    names: z.array(zAbilityName).readonly(),
    pokemon: z.array(z.object({
        slot: z.number().int().optional(),
        pokemon: z.object({
            name: z.string().optional(),
            url: z.string().url().optional()
        }).optional()
    })).readonly(),
    moves: z.array(zMoveSummary).readonly(),
    sprites: z.object({}).readonly()
});

export const zVersionName = z.object({
    name: z.string().max(200),
    language: zLanguageSummary
});

export const zVersionDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    names: z.array(zVersionName).readonly(),
    version_group: zVersionGroupSummary
});

export const zVersionGroupDetail = z.object({
    id: z.number().int().readonly(),
    name: z.string().max(200),
    order: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    generation: zGenerationSummary,
    move_learn_methods: z.array(z.object({
        name: z.string(),
        url: z.string().url()
    })).readonly(),
    pokedexes: z.array(z.object({
        name: z.string(),
        url: z.string().url()
    })).readonly(),
    regions: z.array(z.object({
        name: z.string(),
        url: z.string().url()
    })).readonly(),
    versions: z.array(zVersionSummary).readonly()
});

export const zAbilityListResponse = zPaginatedAbilitySummaryList;

export const zAbilityRetrieveResponse = zAbilityDetail;

export const zBerryListResponse = zPaginatedBerrySummaryList;

export const zBerryRetrieveResponse = zBerryDetail;

export const zBerryFirmnessListResponse = zPaginatedBerryFirmnessSummaryList;

export const zBerryFirmnessRetrieveResponse = zBerryFirmnessDetail;

export const zBerryFlavorListResponse = zPaginatedBerryFlavorSummaryList;

export const zBerryFlavorRetrieveResponse = zBerryFlavorDetail;

export const zCharacteristicListResponse = zPaginatedCharacteristicSummaryList;

export const zCharacteristicRetrieveResponse = zCharacteristicDetail;

export const zContestTypeListResponse = zPaginatedContestTypeSummaryList;

export const zContestTypeRetrieveResponse = zContestTypeDetail;

export const zContestEffectListResponse = zPaginatedContestEffectSummaryList;

export const zContestEffectRetrieveResponse = zContestEffectDetail;

export const zEggGroupListResponse = zPaginatedEggGroupSummaryList;

export const zEggGroupRetrieveResponse = zEggGroupDetail;

export const zEncounterMethodListResponse = zPaginatedEncounterMethodSummaryList;

export const zEncounterMethodRetrieveResponse = zEncounterMethodDetail;

export const zEncounterConditionListResponse = zPaginatedEncounterConditionSummaryList;

export const zEncounterConditionRetrieveResponse = zEncounterConditionDetail;

export const zEncounterConditionValueListResponse = zPaginatedEncounterConditionValueSummaryList;

export const zEncounterConditionValueRetrieveResponse = zEncounterConditionValueDetail;

export const zEvolutionChainListResponse = zPaginatedEvolutionChainSummaryList;

export const zEvolutionChainRetrieveResponse = zEvolutionChainDetail;

export const zEvolutionTriggerListResponse = zPaginatedEvolutionTriggerSummaryList;

export const zEvolutionTriggerRetrieveResponse = zEvolutionTriggerDetail;

export const zGenerationListResponse = zPaginatedGenerationSummaryList;

export const zGenerationRetrieveResponse = zGenerationDetail;

export const zGenderListResponse = zPaginatedGenderSummaryList;

export const zGenderRetrieveResponse = zGenderDetail;

export const zGrowthRateListResponse = zPaginatedGrowthRateSummaryList;

export const zGrowthRateRetrieveResponse = zGrowthRateDetail;

export const zItemListResponse = zPaginatedItemSummaryList;

export const zItemRetrieveResponse = zItemDetail;

export const zItemCategoryListResponse = zPaginatedItemCategorySummaryList;

export const zItemCategoryRetrieveResponse = zItemCategoryDetail;

export const zItemAttributeListResponse = zPaginatedItemAttributeSummaryList;

export const zItemAttributeRetrieveResponse = zItemAttributeDetail;

export const zItemFlingEffectListResponse = zPaginatedItemFlingEffectSummaryList;

export const zItemFlingEffectRetrieveResponse = zItemFlingEffectDetail;

export const zItemPocketListResponse = zPaginatedItemPocketSummaryList;

export const zItemPocketRetrieveResponse = zItemPocketDetail;

export const zLanguageListResponse = zPaginatedLanguageSummaryList;

export const zLanguageRetrieveResponse = zLanguageDetail;

export const zLocationListResponse = zPaginatedLocationSummaryList;

export const zLocationRetrieveResponse = zLocationDetail;

export const zLocationAreaListResponse = zPaginatedLocationAreaSummaryList;

export const zLocationAreaRetrieveResponse = zLocationAreaDetail;

export const zMachineListResponse = zPaginatedMachineSummaryList;

export const zMachineRetrieveResponse = zMachineDetail;

export const zMoveListResponse = zPaginatedMoveSummaryList;

export const zMoveRetrieveResponse = zMoveDetail;

export const zMoveAilmentListResponse = zPaginatedMoveMetaAilmentSummaryList;

export const zMoveAilmentRetrieveResponse = zMoveMetaAilmentDetail;

export const zMoveBattleStyleListResponse = zPaginatedMoveBattleStyleSummaryList;

export const zMoveBattleStyleRetrieveResponse = zMoveBattleStyleDetail;

export const zMoveCategoryListResponse = zPaginatedMoveMetaCategorySummaryList;

export const zMoveCategoryRetrieveResponse = zMoveMetaCategoryDetail;

export const zMoveDamageClassListResponse = zPaginatedMoveDamageClassSummaryList;

export const zMoveDamageClassRetrieveResponse = zMoveDamageClassDetail;

export const zMoveLearnMethodListResponse = zPaginatedMoveLearnMethodSummaryList;

export const zMoveLearnMethodRetrieveResponse = zMoveLearnMethodDetail;

export const zMoveTargetListResponse = zPaginatedMoveTargetSummaryList;

export const zMoveTargetRetrieveResponse = zMoveTargetDetail;

export const zNatureListResponse = zPaginatedNatureSummaryList;

export const zNatureRetrieveResponse = zNatureDetail;

export const zPalParkAreaListResponse = zPaginatedPalParkAreaSummaryList;

export const zPalParkAreaRetrieveResponse = zPalParkAreaDetail;

export const zPokedexListResponse = zPaginatedPokedexSummaryList;

export const zPokedexRetrieveResponse = zPokedexDetail;

export const zPokemonListResponse = zPaginatedPokemonSummaryList;

export const zPokemonRetrieveResponse = zPokemonDetail;

export const zPokemonColorListResponse = zPaginatedPokemonColorSummaryList;

export const zPokemonColorRetrieveResponse = zPokemonColorDetail;

export const zPokemonFormListResponse = zPaginatedPokemonFormSummaryList;

export const zPokemonFormRetrieveResponse = zPokemonFormDetail;

export const zPokemonHabitatListResponse = zPaginatedPokemonHabitatSummaryList;

export const zPokemonHabitatRetrieveResponse = zPokemonHabitatDetail;

export const zPokemonShapeListResponse = zPaginatedPokemonShapeSummaryList;

export const zPokemonShapeRetrieveResponse = zPokemonShapeDetail;

export const zPokemonSpeciesListResponse = zPaginatedPokemonSpeciesSummaryList;

export const zPokemonSpeciesRetrieveResponse = zPokemonSpeciesDetail;

export const zPokeathlonStatListResponse = zPaginatedPokeathlonStatSummaryList;

export const zPokeathlonStatRetrieveResponse = zPokeathlonStatDetail;

export const zRegionListResponse = zPaginatedRegionSummaryList;

export const zRegionRetrieveResponse = zRegionDetail;

export const zStatListResponse = zPaginatedStatSummaryList;

export const zStatRetrieveResponse = zStatDetail;

export const zSuperContestEffectListResponse = zPaginatedSuperContestEffectSummaryList;

export const zSuperContestEffectRetrieveResponse = zSuperContestEffectDetail;

export const zTypeListResponse = zPaginatedTypeSummaryList;

export const zTypeRetrieveResponse = zTypeDetail;

export const zVersionListResponse = zPaginatedVersionSummaryList;

export const zVersionRetrieveResponse = zVersionDetail;

export const zVersionGroupListResponse = zPaginatedVersionGroupSummaryList;

export const zVersionGroupRetrieveResponse = zVersionGroupDetail;

export const zPokemonEncountersRetrieveResponse = z.array(z.object({
    location_area: z.object({
        name: z.string(),
        url: z.string().url()
    }),
    version_details: z.array(z.object({
        encounter_details: z.array(z.object({
            chance: z.number(),
            condition_values: z.array(z.object({
                name: z.string(),
                url: z.string().url()
            })),
            max_level: z.number(),
            method: z.object({
                name: z.string(),
                url: z.string().url()
            }),
            min_level: z.number()
        })),
        max_chance: z.number(),
        version: z.object({
            name: z.string(),
            url: z.string().url()
        })
    }))
}));